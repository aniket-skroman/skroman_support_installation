// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: complaint.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createComplaint = `-- name: CreateComplaint :one
insert into complaint (
    client_id,
    device_id,
    problem_statement,
    problem_category,
    client_available,
    status
) values (
    $1,$2,$3,$4,$5,$6
) returning id, client_id, device_id, problem_statement, problem_category, client_available, status, created_at, updated_at
`

type CreateComplaintParams struct {
	ClientID         uuid.UUID      `json:"client_id"`
	DeviceID         uuid.UUID      `json:"device_id"`
	ProblemStatement string         `json:"problem_statement"`
	ProblemCategory  sql.NullString `json:"problem_category"`
	ClientAvailable  time.Time      `json:"client_available"`
	Status           string         `json:"status"`
}

func (q *Queries) CreateComplaint(ctx context.Context, arg CreateComplaintParams) (Complaint, error) {
	row := q.db.QueryRowContext(ctx, createComplaint,
		arg.ClientID,
		arg.DeviceID,
		arg.ProblemStatement,
		arg.ProblemCategory,
		arg.ClientAvailable,
		arg.Status,
	)
	var i Complaint
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.DeviceID,
		&i.ProblemStatement,
		&i.ProblemCategory,
		&i.ClientAvailable,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getComplaints = `-- name: GetComplaints :many
select id, client_id, device_id, problem_statement, problem_category, client_available, status, created_at, updated_at from complaint
order by id
limit $1
offset $2
`

type GetComplaintsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetComplaints(ctx context.Context, arg GetComplaintsParams) ([]Complaint, error) {
	rows, err := q.db.QueryContext(ctx, getComplaints, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Complaint{}
	for rows.Next() {
		var i Complaint
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.DeviceID,
			&i.ProblemStatement,
			&i.ProblemCategory,
			&i.ClientAvailable,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
